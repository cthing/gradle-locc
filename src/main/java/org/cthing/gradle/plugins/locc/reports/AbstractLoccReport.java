/*
 * Copyright 2024 C Thing Software
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.cthing.gradle.plugins.locc.reports;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.gradle.api.Task;
import org.gradle.api.file.RegularFileProperty;
import org.gradle.api.model.ObjectFactory;
import org.gradle.api.provider.Property;
import org.gradle.api.reporting.Report;

import groovy.lang.Closure;
import groovy.lang.GroovyObjectSupport;


/**
 * Base class for the reports generated by this plugin.
 */
abstract class AbstractLoccReport extends GroovyObjectSupport implements LoccReport {

    protected static final String REPORT_BASE_NAME = "locc";

    protected final Task task;

    private final String name;
    private final String displayName;
    private final RegularFileProperty destination;
    private final Property<Boolean> required;

    protected AbstractLoccReport(final Task task, final String name, final String displayName,
                                 final boolean required) {
        this.task = task;
        this.name = name;
        this.displayName = displayName;

        final ObjectFactory objects = task.getProject().getObjects();
        this.destination = objects.fileProperty();
        this.required = objects.property(Boolean.class).convention(required);
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public String getDisplayName() {
        return this.displayName;
    }

    @Override
    public OutputType getOutputType() {
        return OutputType.FILE;
    }


    @Override
    public Property<Boolean> getRequired() {
        return this.required;
    }

    @Override
    public RegularFileProperty getOutputLocation() {
        return this.destination;
    }

    @Override
    @Deprecated
    public void setDestination(final File file) {
        this.destination.set(file);
    }

    /**
     * Sets whether the report is required to be generated. This method is only used by Groovy configuration
     * of the report.
     *
     * @param required {@code true} if the report should be generated
     */
    void setRequired(final boolean required) {
        this.required.set(required);
    }

    @Override
    @SuppressWarnings("rawtypes")
    public Report configure(final Closure closure) {
        final Closure cl = (Closure)closure.clone();
        cl.setResolveStrategy(Closure.DELEGATE_FIRST);
        cl.setDelegate(this);
        cl.call(this);
        return this;
    }

    /**
     * Provides an ISO 8601 format timestamp.
     *
     * @return ISO 8601 format timestamp.
     */
    protected String timestamp() {
        return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX", Locale.US).format(new Date());
    }
}
